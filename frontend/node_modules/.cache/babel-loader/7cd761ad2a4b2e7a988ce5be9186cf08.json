{"ast":null,"code":"//Model \nconst endPoint = 'http://localhost:9000/api/customers';\n\nclass apiModel {}\n\napiModel.all = () => {\n  return fetch(endPoint) // Method isn't required--Get all is default\n  .then(response => response.json()).catch(err => console.log('Could not get all customers\\n', err));\n};\n\napiModel.getOne = rowid => {\n  return fetch(`${endPoint}/${rowid}`, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }).then(response => {\n    console.log(response.json().body);\n    return response.json();\n  }).catch(err => console.log('Could not get customer \\n', err));\n};\n\napiModel.create = customer => {\n  return fetch(endPoint, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(customer)\n  }) // .then(response => response.json())\n  .catch(err => console.log('Could not create customer\\n', err));\n};\n\napiModel.update = customer => {\n  let rowid = customer.rowid; // not expecting rowid in the body\n\n  delete customer.rowid;\n  console.log(customer);\n  return fetch(`${endPoint}/${rowid}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json' // 'Content-Type': 'application/x-www-form-urlencoded',\n\n    },\n    body: JSON.stringify(customer)\n  }).then(response => response.json()).catch(err => console.log('Could not update customer \\n', err));\n};\n\nexport default apiModel;","map":{"version":3,"sources":["/Users/minsu/projects/project3/frontend/src/models/apiModel.js"],"names":["endPoint","apiModel","all","fetch","then","response","json","catch","err","console","log","getOne","rowid","method","headers","body","create","customer","JSON","stringify","update"],"mappings":"AAAA;AACA,MAAMA,QAAQ,GAAG,qCAAjB;;AAEA,MAAMC,QAAN,CAAe;;AAATA,Q,CACKC,G,GAAM,MAAM;AACf,SAAOC,KAAK,CAACH,QAAD,CAAL,CAAgB;AAAhB,GACFI,IADE,CACGC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADf,EAEFC,KAFE,CAEIC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAY,+BAAZ,EAA6CF,GAA7C,CAFX,CAAP;AAGH,C;;AALCP,Q,CAOKU,M,GAAUC,KAAD,IAAW;AACvB,SAAOT,KAAK,CAAE,GAAEH,QAAS,IAAGY,KAAM,EAAtB,EAAyB;AAC7BC,IAAAA,MAAM,EAAE,KADqB;AAE7BC,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX;AAFoB,GAAzB,CAAL,CAMFV,IANE,CAMGC,QAAQ,IAAI;AACdI,IAAAA,OAAO,CAACC,GAAR,CAAYL,QAAQ,CAACC,IAAT,GAAgBS,IAA5B;AACA,WAAOV,QAAQ,CAACC,IAAT,EAAP;AACH,GATE,EAUFC,KAVE,CAUIC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyCF,GAAzC,CAVX,CAAP;AAWH,C;;AAnBCP,Q,CAsBKe,M,GAAUC,QAAD,IAAc;AAC1B,SAAOd,KAAK,CAACH,QAAD,EAAW;AACnBa,IAAAA,MAAM,EAAE,MADW;AAEnBC,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX,KAFU;AAKnBC,IAAAA,IAAI,EAAEG,IAAI,CAACC,SAAL,CAAeF,QAAf;AALa,GAAX,CAAL,CAOH;AAPG,GAQFV,KARE,CAQIC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAY,6BAAZ,EAA2CF,GAA3C,CARX,CAAP;AASH,C;;AAhCCP,Q,CAkCKmB,M,GAAUH,QAAD,IAAc;AAC1B,MAAIL,KAAK,GAAGK,QAAQ,CAACL,KAArB,CAD0B,CAE1B;;AACA,SAAOK,QAAQ,CAACL,KAAhB;AAEAH,EAAAA,OAAO,CAACC,GAAR,CAAYO,QAAZ;AACA,SAAOd,KAAK,CAAE,GAAEH,QAAS,IAAGY,KAAM,EAAtB,EAAyB;AACjCC,IAAAA,MAAM,EAAE,KADyB;AAEjCC,IAAAA,OAAO,EAAE;AACL,sBAAgB,kBADX,CAEL;;AAFK,KAFwB;AAMjCC,IAAAA,IAAI,EAAEG,IAAI,CAACC,SAAL,CAAeF,QAAf;AAN2B,GAAzB,CAAL,CAQFb,IARE,CAQGC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EARf,EASFC,KATE,CASIC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4CF,GAA5C,CATX,CAAP;AAUH,C;;AAYL,eAAeP,QAAf","sourcesContent":["//Model \nconst endPoint = 'http://localhost:9000/api/customers';\n\nclass apiModel {\n    static all = () => {\n        return fetch(endPoint) // Method isn't required--Get all is default\n            .then(response => response.json())\n            .catch(err => console.log('Could not get all customers\\n', err));\n    }\n\n    static getOne = (rowid) => {\n        return fetch(`${endPoint}/${rowid}`, {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            })\n            .then(response => {\n                console.log(response.json().body)\n                return response.json()\n            })\n            .catch(err => console.log('Could not get customer \\n', err));\n    };\n    \n\n    static create = (customer) => {\n        return fetch(endPoint, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(customer)\n        })\n            // .then(response => response.json())\n            .catch(err => console.log('Could not create customer\\n', err))\n    }\n\n    static update = (customer) => {\n        let rowid = customer.rowid;\n        // not expecting rowid in the body\n        delete customer.rowid;\n\n        console.log(customer)\n        return fetch(`${endPoint}/${rowid}`, {\n            method: 'PUT',\n            headers: {  \n                'Content-Type': 'application/json'\n                // 'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: JSON.stringify(customer)\n        })\n            .then(response => response.json())\n            .catch(err => console.log('Could not update customer \\n', err));\n    };\n\n    // static delete = (todo) => {\n    //     return fetch(`${endPoint}/${todo._id}`, {\n    //         method: \"DELETE\"\n    //     })\n    //         .then(response => response.json())\n    //         .catch(err => console.log('Could not delete todo \\n', err));\n    // }\n\n}\n\nexport default apiModel;"]},"metadata":{},"sourceType":"module"}